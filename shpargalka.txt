- папка containers - содержит компоненты которые имеют state, т.е корневые компоненты
- папка components/UI - содержит элементы интерфейса (Buttons...)
- Object.keys(obj) - превращает объект obj в массив ключей этого объекта
- () => {} - стрелочная ф-ция чтобы не терять контекст this
- const cls = [] - массив классов <Components className={cls.join(' ')}/>
- !!obj - два !! приводит значение(выражение, объект, массив) к булевому типу


**** is_js  - пакет для проверки типов, валидации, email,url,credit и т.д ****
- npm i is_js
- is.email('test@test.com'); // вернет true


**** Routing *****
- npm i react-router-dom
- index.js: <BrowserRouter><App/></BrowserRouter>
- App.js: <Route exact path="/" render={() => <h1>Home</h1>} />
          <Route path="/about" component={About} />
- App.js: <NavLink exact to="/">Home</NavLink>
          <NavLink to="/about" activeClassName={'custom-active'}>About</NavLink>
          <Link><Link> - аналог NavLink но без activeClassName и activeStyle
- exact - пути должны полностью совпадать
  Параметры NavLink:
- активной ссылке добавляется класс active = a.active
- activeClassName - меняем активный класс на свой
- activeStyle={{color: 'red'}} - стили для активной ссылке
  Конфигурация NavLink:
- <NavLink to={{
    pathname: '/cars',    (путь куда ведет ссылка)
    search: '?a=1&b=2',   (get-параметры которые должны иддти после знака ?)
    hash: 'id-element'    (hash - позволяет скроллить к нужному элементу)
  }}>Cars</NavLink>
  Динамический роутинг:
- history.push - переход к нужной странице - для классовых компонентов
  goToHome = () => {
    this.props.history.push('/')  или
    this.props.history.push({
      pathname: '/'
    })
  }
- withRouter - добавляет свойства роутинга history/match... для функциональных компонентов
  import {withRouter} from 'react-router-dom'
  const Car = props => {}
  export default withRouter(Car)
- withRouter - также добавляет routeк из BrowserRouter в App, через обертку connect:
  export default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));
- Навигация по name (также по id):
  Car.js: <div onClick={() => props.history.push('/cars/'+props.name.toLowerCase())}></div>
  App.js: <Route path="/cars/:name" component={CardDetail}/>
  CardDetail.js:  <h1>{this.props.match.params.name}</h1>
- Switch - объединяет роуты, показывает первый совпаденный Route
- обработка не существующего url (страница 404):
  <Switch>
    <Route ***/>
    <Route ***/>
    <Route ***/>
    <Route render={()=><h1>404 not found</h1>}/> (страница 404 должна идти самая последняя в Switch)
  </Switch>
- редирект - переход на другую страницу если url не существует:
  import Redirect from 'react-router-dom';
  <Switch>
    <Route ***/>
    <Route ***/>
    <Route ***/>
    <Redirect to={'/}/>  (редирект на главную если такого url не существует )
  </Switch>
- защита роутов:
  <Switch>
    <Route ***/>
    рендерим Route только если isLoggedIn = true:
    { this.state.isLoggedIn ? <Route path="/contacts" component={Contacts}/> : null }  
    <Route ***/>
  </Switch>


*** свои фреймворки (form/formFramework) ***
- набор функций которые можно переиспользовать в разных компонентах (например создание форм-контролов, ф-ция валидации)




*** работа с сервером firebase ( база данных && хостинг && авторизация ) ***
1) установка axios - для работы с сервером
- npm i axios   =   для работы с сервером, ajax
- import axios from 'axios'
- axios.get('url').then(response => conrole.log(response))

2) создание базы данных
- develop / database / realtime database / Создать базу данных / Запустить в тестовом режиме
- axios.get('https://react-quiz-f2cdd.firebaseio.com/quiz.json').then(response => conrole.log(response))
- +++ нужно дописать к адресу firebase   .json   !!!!!!!!!!

3) 
- Auhtentication - включаем авторизацию по email и паролю
- Настройки/ ключ api для веб-приложения - это api-key 
4) для логина смотрим - firebase / sign in with email/password
5) для регистрации смотрим - firebase / sign up with email/password


*** async ***
createQuizHandler = async (event) => {
   try {
      await axios.post(
        'https://react-quiz-f2cdd.firebaseio.com/quizes.json',
        this.state.quiz
      );

      this.setState({
        quiz: [],
        isFormValid: false,
        rightAnswerId: 1,
        formControls: createFormControls(),
      });
    } catch (error) {
      console.log(error);
    }
}

- async componentDidMount() {}
- async function go() {}
- const xhr = async () => {}


**** loading.io/css - прелоадеры ****


*** Деплой, хостинг на firebase (firebase.com/hosting)***
- npm install -g firebase-tools
- npm run build
- firebase login
- firebase init / выбираем Hosting - жмем пробел / use an existing project / react-quiz (выбираем проект) / build (папка директории) / yes / no
- firebase deploy
// получили ссылку на проект в firebase - react-quiz-f2cdd.web.app

==================================

*** REDUX ***
ПОДГОТОВКА ПРОЕКТА:
- npm i redux react-redux redux-thunk
- папка store: 
  - /actions/actionTypes.js
  - /reducers/rootReducers.js:
    -- import {combineReducers} from 'redux';
    -- export default combineReducers({name: reducerName})
- index.js:
  - import { createStore, compose, applyMiddleware } from 'redux';
    import { Provider } from 'react-redux';
    import rootReducer from './store/reducers/rootReducer';
    import thunk from 'redux-thunk';
  - const composeEnhancers = // берем из github redux-devtools
  - const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));
  - const app = (<Provider store={store}><BrowserRouter><App /></BrowserRouter></Provider>);

ПЕРЕДАЧА STATE И DISPATCH ACTIONs в компоненте класса:
// доступно через this.props.quizes | this.props.loading
- function mapStateToProps(state) {
    return {
      quizes: state.quiz.quizes, // название: state.названиеРедюсера.поле
      loading: state.quiz.loading,
    };
  }

// доступно через this.props.fetchQuizes
- function mapDispatchToProps(dispatch) {
    return {
      fetchQuizes: () => dispatch(fetchQuizes()), // название: диспатчим ф-цию,которая возвращает action
    };
  }

- export default connect(mapStateToProps, mapDispatchToProps)(QuizList);

/// разделяем глобальный стейт(redux всего приложения) и локальный(форм-контролы, валидация полей формы и т.д)